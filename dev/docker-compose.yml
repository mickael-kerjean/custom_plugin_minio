version: '3.5'
services:
  postgres:
    container_name: postgres
    image: postgres
    volumes:
      - ./volumes/postgres_data:/var/lib/postgresql/data
      - ./volumes/postgres_init:/docker-entrypoint-initdb.d/
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    volumes:
      - ./keycloak_imports:/opt/jboss/keycloak/imports
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    ports:
      - 8080:8080
    command: "-b 0.0.0.0 -Dkeycloak.import=/opt/jboss/keycloak/imports/minio-export.json -Dkeycloak.profile=preview -Dkeycloak.profile.feature.upload_scripts=enabled"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/auth/realms/master"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  etcd:
    container_name: etcd
    image: gcr.io/etcd-development/etcd:v3.3.9
    volumes:
      - ./volumes/etcd-data.tmp:/etcd-data
    ports:
      - 2379:2379
      - 2380:2380
    command: "/usr/local/bin/etcd --name s1 --data-dir /etcd-data --listen-client-urls http://0.0.0.0:2379 --advertise-client-urls http://0.0.0.0:2379 --listen-peer-urls http://0.0.0.0:2380 --initial-advertise-peer-urls http://0.0.0.0:2380 --initial-cluster s1=http://0.0.0.0:2380 --initial-cluster-token tkn --initial-cluster-state new"
    healthcheck:
      test: ["CMD-SHELL", "ETCDCTL_API=3 etcdctl --endpoints=http://localhost:2379 endpoint health"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    container_name: minio
    image: minio/minio:latest
    pull_policy: always
    volumes:
      - ./volumes/minio_data:/data
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ETCD_ENDPOINTS: http://etcd:2379
      MINIO_ROOT_USER: Q3AM3UQ867SPQQA43P2F
      MINIO_ROOT_PASSWORD: zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG
      MINIO_IDENTITY_OPENID_CONFIG_URL: http://keycloak:8080/auth/realms/application/.well-known/openid-configuration
      MINIO_IDENTITY_OPENID_CLIENT_ID: minioclient
      MINIO_IDENTITY_OPENID_SCOPES: "openid,email"
      MINIO_NOTIFY_KAFKA_ENABLE_PUT: "on"
      MINIO_NOTIFY_KAFKA_BROKERS_PUT: "kafka:9092"
      MINIO_NOTIFY_KAFKA_TOPIC_PUT: "put.file"
    command: "gateway nas /data --address :9000 --console-address :9001"
#    command: "server /data --address :9000 --console-address :9001"
    depends_on:
      keycloak:
        condition: service_healthy
      etcd:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

#  filestash:
#    container_name: filestash
#    image: dev/filestash
#    pull_policy: always
#    restart: always
#    ports:
#      - 8334:8334

  # ignore self-signed ssl
  onlyoffice:
    container_name: filestash_oods
    image: onlyoffice/documentserver
    restart: always
    ports:
      - 8000:80
    entrypoint: /bin/bash -c "/var/www/onlyoffice/documentserver/npm/json -f /etc/onlyoffice/documentserver/default.json -I -e 'this.services.CoAuthoring.requestDefaults.rejectUnauthorized=false' && /app/ds/run-document-server.sh"

  elasticsearch:
    container_name: elasticsearch
    build: 
      context: .
      dockerfile: ./elastic-ingest-pipeline/Dockerfile
    image: dev/elasticsearch-ingestplugin
    volumes:
      - ./volumes/elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    environment:
      discovery.type: single-node
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:elastic -s -f elasticsearch:9200/_cat/health >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5  
      start_period: 60s

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.16.2
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      elasticsearch:
        condition: service_healthy

  zookeeper:
    container_name: zookeeper
    image: 'bitnami/zookeeper:latest'
    volumes:
      - ./volumes/zookeeper_data:/bitnami/zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/zookeeper/bin/zkServer.sh status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  kafka:
    container_name: kafka
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    volumes:
      - ./volumes/kafka_data:/bitnami/kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --list --bootstrap-server kafka:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      zookeeper:
        condition: service_healthy

  indexer:
    container_name: indexer
    build:
      context: ./content-indexer
      dockerfile: ./Dockerfile
    image: dev/indexer
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio: 
        condition: service_healthy
      configDefaultBucketWithNotify:
        condition: service_started

  configDefaultBucketWithNotify:
    image: minio/mc
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 Q3AM3UQ867SPQQA43P2F zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG --api s3v4;
      /usr/bin/mc mb minio/default;
      /usr/bin/mc event add minio/default arn:minio:sqs::PUT:kafka --event put;
      "
    depends_on:
      minio:
        condition: service_healthy
      kafka:
        condition: service_healthy
